/*
 * The MIT License
 *
 * Copyright (c) 2015 ECOLE POLYTECHNIQUE FEDERALE DE LAUSANNE, Switzerland,
 * Group Fellay
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the Software
 * is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

package pairwisealignment

import munit.FunSuite

class PairwiseAlignmentSpec extends FunSuite {

  val blosum = {
    val lines = io.Source
      .fromFile(getClass.getResource("/").getPath + "BLOSUM62.txt")
      .getLines
      .toList
      .map(_.split("\\s+"))
    lines.tail.zipWithIndex.flatMap {
      case (line, _) =>
        lines.head.drop(1).zipWithIndex.map {
          case (c1, i1) =>
            val c2 = line.head
            val score = line.tail(i1)
            (c1.charAt(0), c2.charAt(0)) -> score.toInt
        }
    }.toMap
  }
  val pam = {
    val lines = io.Source
      .fromFile(getClass.getResource("/").getPath + "PAM250_1.txt")
      .getLines
      .toList
      .map(_.split("\\s+"))
    lines.tail.zipWithIndex.flatMap {
      case (line, _) =>
        lines.head.drop(1).zipWithIndex.map {
          case (c1, i1) =>
            val c2 = line.head
            val score = line.tail(i1)
            (c1.charAt(0), c2.charAt(0)) -> score.toInt
        }
    }.toMap
  }

  test("longest common subsequence") {
    assertEquals(
      LongestCommonSubstring.longestCommonSubstring("AACCTTGG", "ACACTGTGA"),
      "AACTTG"
    )
  }

  test("global affine alignment") {

    assertEquals(
      GlobalPairwiseAlignment
        .globalAffineAlignment("PRTEINS", "PRTWPSEIN", blosum, 11, 1),
      (8, "PRT---EINS", "PRTWPSEIN-")
    )
    assertEquals(
      GlobalPairwiseAlignment.globalAffineAlignment(
        "YHFDVPDCWAHRYWVENPQAIAQMEQICFNWFPSMMMKQPHVFKVDHHMSCRWLPIRGKKCSSCCTRMRVRTVWE",
        "YHEDVAHEDAIAQMVNTFGFVWQICLNQFPSMMMKIYWIAVLSAHVADRKTWSKHMSCRWLPIISATCARMRVRTVWE",
        blosum,
        11,
        1
      ),
      (
        144,
        "YHFDVPDCWAHRYWVENPQAIAQME-------QICFNWFPSMMMK-------QPHVF---KVDHHMSCRWLPIRGKKCSSCCTRMRVRTVWE",
        "YHEDV----AHE------DAIAQMVNTFGFVWQICLNQFPSMMMKIYWIAVLSAHVADRKTWSKHMSCRWLPI----ISATCARMRVRTVWE"
      )
    )

  }
  test("stamatakis") {

    val score = Map(('A', 'B') -> 5)

    assertEquals(
      GlobalPairwiseAlignment.globalAlignment("A", "B", score, 2, 1),
      (5, "A", "B")
    )

  }

  test("stamatakis2") {

    val score = {
      val l = List('A', 'T', 'G', 'C')
      l.flatMap { c1 =>
        l.map { c2 =>
          (c1, c2) -> (if (c1 == c2) 0
                       else -1)
        }
      }
    }.toMap

    assertEquals(
      GlobalPairwiseAlignment
        .globalAlignment("AAAGGG", "TTAAAAGGGGTT", score, 5, 1),
      (-14, "AAA------GGG", "TTAAAAGGGGTT")
    )

  }
  test("global alignment") {

    val score = {
      val l = List('A', 'T', 'G', 'C')
      l.flatMap { c1 =>
        l.map { c2 =>
          (c1, c2) -> (if (c1 == c2) 1
                       else -1)
        }
      }
    }.toMap

    assertEquals(
      GlobalPairwiseAlignment.globalAlignment("ATTA", "ATTA", score, 2, 2),
      (4, "ATTA", "ATTA")
    )
    assertEquals(
      GlobalPairwiseAlignment.globalAlignment("ATTA", "GGGGATTA", score, 2, 2),
      (-4, "----ATTA", "GGGGATTA")
    )
    assertEquals(
      GlobalPairwiseAlignment.globalAlignment("ATTA", "ATTAGGGG", score, 2, 2),
      (-4, "ATTA----", "ATTAGGGG")
    )
    assertEquals(
      GlobalPairwiseAlignment
        .globalAlignment("AATGCAACGT", "TGCACGTGG", score, 2, 2),
      (-3, "AATGCAACGT--", "--TGCA-CGTGG")
    )
    assertEquals(
      GlobalPairwiseAlignment
        .globalAlignment("AATGCAACGT", "TGCAACGTTGG", score, 2, 2),
      (-2, "AATGCAACGT---", "--TGCAACGTTGG")
    )
    assertEquals(
      GlobalPairwiseAlignment
        .globalAlignment("AATGCAACGTT", "CGTG", score, 3, 3),
      (-19, "AATGCAACGTT", "----C---GTG")
    )
    // Affine:
    assertEquals(
      GlobalPairwiseAlignment.globalAlignment("ATTA", "ATTA", score, 2, 1),
      (4, "ATTA", "ATTA")
    )
    assertEquals(
      GlobalPairwiseAlignment.globalAlignment("ATTA", "GGGGATTA", score, 2, 1),
      (-1, "----ATTA", "GGGGATTA")
    )
    assertEquals(
      GlobalPairwiseAlignment.globalAlignment("ATTA", "ATTAGGGG", score, 2, 1),
      (-1, "ATTA----", "ATTAGGGG")
    )
    assertEquals(
      GlobalPairwiseAlignment
        .globalAlignment("AATGCAACGT", "TGCACGTGG", score, 2, 1),
      (-1, "AATGCAACGT--", "--TGC-ACGTGG")
    )
    assertEquals(
      GlobalPairwiseAlignment
        .globalAlignment("AATGCAACGT", "TGCAACGTTGG", score, 2, 1),
      (1, "AATGCAACGT---", "--TGCAACGTTGG")
    )
    assertEquals(
      GlobalPairwiseAlignment
        .globalAlignment("AATGCAACGTT", "CGTG", score, 2, 1),
      (-6, "AATGCAACGTT", "-------CGTG")
    )

    assertEquals(
      GlobalPairwiseAlignment.globalAlignment(
        "ILYPRQSMICMSFCFWDMWKKDVPVVLMMFLERRQMQSVFSWLVTVKTDCGKGIYNHRKYLGLPTMTAGDWHWIKKQNDPHEWFQGRLETAWLHSTFLYWKYFECDAVKVCMDTFGLFGHCDWDQQIHTCTHENEPAIAFLDLYCRHSPMCDKLYPVWDMACQTCHFHHSWFCRNQEMWMKGDVDDWQWGYHYHTINSAQCNQWFKEICKDMGWDSVFPPRHNCQRHKKCMPALYAGIWMATDHACTFMVRLIYTENIAEWHQVYCYRSMNMFTCGNVCLRCKSWIFVKNYMMAPVVNDPMIEAFYKRCCILGKAWYDMWGICPVERKSHWEIYAKDLLSFESCCSQKKQNCYTDNWGLEYRLFFQSIQMNTDPHYCQTHVCWISAMFPIYSPFYTSGPKEFYMWLQARIDQNMHGHANHYVTSGNWDSVYTPEKRAGVFPVVVPVWYPPQMCNDYIKLTYECERFHVEGTFGCNRWDLGCRRYIIFQCPYCDTMKICYVDQWRSIKEGQFRMSGYPNHGYWFVHDDHTNEWCNQPVLAKFVRSKIVAICKKSQTVFHYAYTPGYNATWPQTNVCERMYGPHDNLLNNQQNVTFWWKMVPNCGMQILISCHNKMKWPTSHYVFMRLKCMHVLMQMEYLDHFTGPGEGDFCRNMQPYMHQDLHWEGSMRAILEYQAEHHRRAFRAELCAQYDQEIILWSGGWGVQDCGFHANYDGSLQVVSGEPCSMWCTTVMQYYADCWEKCMFA",
        "ILIPRQQMGCFPFPWHFDFCFWSAHHSLVVPLNPQMQTVFQNRGLDRVTVKTDCHDHRWKWIYNLGLPTMTAGDWHFIKKHVVRANNPHQWFQGRLTTAWLHSTFLYKKTEYCLVRHSNCCHCDWDQIIHTCAFIAFLDLYQRHWPMCDKLYCHFHHSWFCRNQEMSMDWNQWFPWDSVPRANCLEEGALIALYAGIWANSMKRDMKTDHACTVRLIYVCELHAWLKYCYTSINMLCGNVCLRCKSWIFVKLFYMYAPVVNTIEANSPHYYKRCCILGQGICPVERKSHCEIYAKDLLSFESCCSQKQNCYTDNWGLEYRLFFQHIQMECTDPHANRGWTSCQTAKYWHFNLDDRPPKEFYMWLQATPTDLCMYQHCLMFKIVKQNFRKQHGHANPAASTSGNWDSVYTPEKMAYKDWYVSHPPVDMRRNGSKMVPVWYPPGIWHWKQSYKLTYECFFTVPGRFHVEGTFGCNRWDHQPGTRRDRQANHQFQCPYSDTMAIWEHAYTYVDQWRSIKEGQMPMSGYPNHGQWNVHDDHTNEQERSPICNQPVLAKFVRSKNVSNHEICKKSQTVFHWACEAQTNVCERMLNNQHVAVKRNVTFWWQMVPNCLWSCHNKMTWPTRPEQHRLFFVKMRLKCMHEYLDVAPSDFCRNMQAYMHSMRAILEYQADFDLKRRLRAIAPMDLCAQYDQEIILWSGGYIYDQSLQVVSCEGCSYYADCYVKCINVKEKCMFA",
        blosum,
        5,
        5
      ),
      (
        1555,
        "ILYPRQSMICMSFCF-WDM--WKKDVPVVLMMFLERRQMQSVF-S-WL--VTVKTDCGKGIYNHR-K--Y-LGLPTMTAGDWHWIKK---Q-NDPHEWFQGRLETAWLHSTFLYWKYFE-CDAVKVCMDTFGLFGHCDWDQQIHTCTHENEPAIAFLDLYCRHSPMCDKLYPVWDMACQTCHFHHSWFCRNQEMWMKGDVDDWQWGYHYHTINSAQCNQWFKEICKDMGWDSVFPPRHNCQRHKKCMPALYAGIW---MA----TDHACTFMVRLIYTENIAEWHQVYCYRSMNMFTCGNVCLRCKSWIFVKN-YMMAPVVNDPMIEA--FYKRCCILGKAWYDMWGICPVERKSHWEIYAKDLLSFESCCSQKKQNCYTDNWGLEYRLFFQSIQMN-TDPH----Y--CQTHVCW-ISAMF-PIYSPFYT--SG-PKEFYMW---LQARI-DQNM---HGHANHYV-TSGNWDSVYTPEKRA--G--V-FP-V-V-------VPVWYPPQMCN--D-YIKLTYEC--E---RFHVEGTFGCNRWD-L-GCRR--YII--FQCPYCDTMKI---CY--VDQWRSIKEGQFRMSGYPNHGYWFVHDDHTNEW-----CNQPVLAKFVRSKIVA---ICKKSQTVFHYAYTPGYNATWPQTNVCERMYGPHDNLLNNQQNVTFWWKMVPNCGMQILISCHNKMKWPT--S-HYVF---MRLKCMHVLMQMEYLDHFTGPGEGDFCRNMQPYMHQDLHWEGSMRAILEYQAEHH-RRAFRA----ELCAQYDQEIILWSGGWGVQDCGFHANYDGSLQVVSGEPCSMWCTTVMQYYADCWEKCMFA",
        "ILIPRQQMGCFPFPWHFDFCFWSAHHSLVVP--LNP-QMQTVFQNRGLDRVTVKTDC----HDHRWKWIYNLGLPTMTAGDWHFIKKHVVRANNPHQWFQGRLTTAWLHSTFLY-KKTEYC-LVR---HS-NCC-HCDWDQIIHTCAF-----IAFLDLYQRHWPMCDKLY------C---HFHHSWFCRNQEMSM--D---W---------N--Q---WFP-------WDSV-P-RANCLE-EGALIALYAGIWANSMKRDMKTDHACT--VRLIYVCELHAWLK-YCYTSINML-CGNVCLRCKSWIFVKLFYMYAPVVNTIEANSPHYYKRCCILGQ------GICPVERKSHCEIYAKDLLSFESCCSQK-QNCYTDNWGLEYRLFFQHIQMECTDPHANRGWTSCQTAKYWHFNLDDRPP-KEFYMWLQATPTDLCMYQHCLMFKIVKQNFRKQHGHANPAASTSGNWDSVYTPEKMAYKDWYVSHPPVDMRRNGSKMVPVWYPPGIWHWKQSY-KLTYECFFTVPGRFHVEGTFGCNRWDHQPGTRRDRQANHQFQCPYSDTMAIWEHAYTYVDQWRSIKEGQMPMSGYPNHGQWNVHDDHTNEQERSPICNQPVLAKFVRSKNVSNHEICKKSQTVFHWA-C---EA---QTNVCERMLN-NQHVAV-KRNVTFWWQMVPNC----LWSCHNKMTWPTRPEQHRLFFVKMRLKCMH-----EYLD--VAPS--DFCRNMQAYMH-------SMRAILEYQADFDLKRRLRAIAPMDLCAQYDQEIILWSGGY-I--------YDQSLQVVSCEGCSYYADCYVKCI-NVKEKCMFA"
      )
    )

  }
  test("edit distance") {
    assertEquals(
      GlobalPairwiseAlignment.editDistance("PLEASANTLY", "MEANLY"),
      5
    )
    assertEquals(GlobalPairwiseAlignment.editDistance("AAGA", "AA-A"), 1)
    assertEquals(GlobalPairwiseAlignment.editDistance("AAGA", "AAGA"), 0)
    assertEquals(
      GlobalPairwiseAlignment.editDistance(
        "GGACRNQMSEVNMWGCWWASVWVSWCEYIMPSGWRRMKDRHMWHWSVHQQSSPCAKSICFHETKNQWNQDACGPKVTQHECMRRRLVIAVKEEKSRETKMLDLRHRMSGRMNEHNVTLRKSPCVKRIMERTTYHRFMCLFEVVPAKRQAYNSCDTYTMMACVAFAFVNEADWWKCNCAFATVPYYFDDSCRMVCGARQCYRLWQWEVNTENYVSIEHAEENPFSKLKQQWCYIPMYANFAWSANHMFWAYIANELQLDWQHPNAHPIKWLQNFLMRPYHPNCGLQHKERITPLHKSFYGMFTQHHLFCKELDWRIMAHANRYYCIQHGWHTNNPMDPIDTRHCCMIQGIPKRDHHCAWSTCDVAPLQGNWMLMHHCHHWNRVESMIQNQHEVAAGIKYWRLNRNGKLPVHTADNYGVLFQRWWFLGWYNFMMWHYSLHFFAVNFYFPELNAGQMPRFQDDQNRDDVYDTCIWYFAWSNTEFMEVFGNMMMYSRPMTKMGFHGMMLPYIAINGLRSISHVNKGIGPISGENCNLSTGLHHYGQLRMVMCGYCTPYRTEVKNQREMISAVHCHQHIDWRWIWCSGHWFGSNKCDLRIEDLQNYEPAKNKSNWPYMKECRKTEPYQDNIETMFFHQHDLARDSGYIANGWHENCRQHQDFSNTFAGGHKGTPKGEHMRRSLYVWDTDCVEKCQWVPELFALCWWTPLPDGVPVMLGTYRQYMFGLVVLYWFEVKYSCHNSWDYYNFHEGTMKDSDPENWCFWGMQIIQFHDHGKPEFFQDPMKQIIKTECTAYNSFMMGHIGKTTIVYLVSYIGRLWMKSCCLTWPPYATAPIKWAEETLLDFGQGPHPKYACHFTHQNMIRLAKLPMYWLWKLMFHE",
        "GMWGFVQVSTQSRFRHMWHWSVHQQSSECAKSICHHEWKNQWNQDACGPKVTQHECMANMPMHKCNNWFWRLVIAVKEEKVRETKMLDLIHRHWLVLNQGRMNEHNVTLRKSPCVKRIMHKWKSRTTFHRFMCLMASEVVPAKRGAQCWRQLGTYATYTVYTMMACVAFAFEYQQDNDNEADWWKCNCAFVPVYFDDSCRPVVGAFQCYRLGLPFGTGWNYAEENPFSKLKQQMHRKTMGECKNMMIWAYCANELQLPIKWGSMYHEHDFQLPPYHPNRFHKIRITILHKSFYGMFTQHHLFCKELDWRIMAWANRYYCIQHGWHTNNPDDPITRHKCMIQGGQNSRNADIRHMPVQCGNWGHAIGLEMPMPMHHCHHANRVESMIQTQHYWGPKLNRNADWWFLGWQNFEIFRMPILRWMGAYEWHYSLHFFAVNFYFPELNAGQMPRFQDDQNNNACYDVWAWSNTEFMEVNGIKKLRFGNMMMYSRPMTKMGFHGMMKSRSISHVNKGIGPISGENCSTGLHHYGQLTEVKNQREMISAVHCHQHIWCKCDLRIEPAKNKGYWPYQKEFCWRKQINSRKTEPYQVAPVINIETMFFDFWYIANGMHENCRRTGHKPNPDCVEKCQWVPELFALCWWRAMPDGVPVMLGTMFGLVVYWFEVKYSCHNSLYRRVTDYYNFHEGTMKDHEVPWNWDNEHCHDHGKAEFFFQMLKIPICDPMKAIIPSTEMVNTPWHPFSFMMGHDGKTTIVYSGSYIGRLWVPSRWKPYAPANWKMPIKWAEETLLMVPHPHFTHQQLWGTTLRLAKLPMYWLWKLMFHHLFGVK"
      ),
      400
    )
  }

  test("localAlignment") {

    val score = {
      val l = List('A', 'T', 'G', 'C')
      l.flatMap { c1 =>
        l.map { c2 =>
          (c1, c2) -> (if (c1 == c2) 1
                       else -1)
        }
      }
    }.toMap

    assertEquals(
      LocalPairwiseAlignment.localAlignment("ATTA", "ATTA", score, 2),
      (4, "ATTA", "ATTA")
    )
    assertEquals(
      LocalPairwiseAlignment.localAlignment("ATTA", "GGGGATTA", score, 2),
      (4, "ATTA", "ATTA")
    )
    assertEquals(
      LocalPairwiseAlignment.localAlignment("ATTA", "ATTAGGGG", score, 2),
      (4, "ATTA", "ATTA")
    )
    assertEquals(
      LocalPairwiseAlignment
        .localAlignment("AATGCAACGT", "TGCACGTGG", score, 2),
      (5, "TGCAACGT", "TGCA-CGT")
    )
    assertEquals(
      LocalPairwiseAlignment
        .localAlignment("AATGCAACGT", "TGCAACGTTGG", score, 2),
      (8, "TGCAACGT", "TGCAACGT")
    )
    assertEquals(
      LocalPairwiseAlignment.localAlignment("AATGCAACGTT", "CGTGG", score, 2),
      (3, "CGT", "CGT")
    )

    assertEquals(
      LocalPairwiseAlignment.localAlignment("MEANLY", "PENALTY", pam, 5),
      (15, "EANL-Y", "ENALTY")
    )

  }

  test("fitting alignment") {
    val score = {
      val l = List('A', 'T', 'G', 'C')
      l.flatMap { c1 =>
        l.map { c2 =>
          (c1, c2) -> (if (c1 == c2) 1
                       else -1)
        }
      }
    }.toMap

    assertEquals(
      FittingPairwiseAlignment.fittingAlignment("ATTA", "ATTA", score, 1),
      (4, "ATTA", "ATTA")
    )
    assertEquals(
      FittingPairwiseAlignment.fittingAlignment("ATTA", "GGGGATTA", score, 1),
      (0, "----ATTA", "GGGGATTA")
    )
    assertEquals(
      FittingPairwiseAlignment.fittingAlignment("ATTA", "ATTAGGGG", score, 1),
      (0, "ATTA----", "ATTAGGGG")
    )
    assertEquals(
      FittingPairwiseAlignment
        .fittingAlignment("AATGCAACGT", "TGCACGTGG", score, 2),
      (1, "TGCAACGT--", "TGCA-CGTGG")
    )
    assertEquals(
      FittingPairwiseAlignment
        .fittingAlignment("AATGCAACGT", "TGCAACGTTGG", score, 2),
      (2, "TGCAACGT---", "TGCAACGTTGG")
    )
    assertEquals(
      FittingPairwiseAlignment
        .fittingAlignment("AATGCAACGTT", "CGTGG", score, 2),
      (0, "CGTT-", "CGTGG")
    )

    assertEquals(
      FittingPairwiseAlignment.fittingAlignment(
        "CAATCACCCCAATCCCTCAATCCTGGCCCCACGCATAGGCTAATGCCAATCGCGGCCAGGGTATAACCGCCATAACTGTGGGTCAGAAGGGATAAGTTCCACAATCCTATTTTCCTCGAGGCGCTTCGATGCGTTAACGCGTACACTCTGTCGGCCAACCGTGTGGGAGCCGAATTGGCTGGGCTGTTGAACATTCTATCAGTAGATAAACGAAGGTACATCCGAGGTTGTCGATCGACCGCGGGGTCGTAGCGCGTGCATGTTCCTTTCAGGCCCACATACTCCGGAACGGTTCATATCACGACTATTCTTGCACAATCGGACAACGGTGTACCATGGTGGACACCGTAGGAGACCAATACTGCGTAAATCATAAGCATTGGAGAGTGGACTGCTAGCGAGGCTCACCATGGAGTCTCGGTCGGCATCTCCTGACTGCTGTTCCATCGCGTTTTTCTTTTACTCACGCAATAAATCAATACCCCCTAACACAGGCCTGCTCCAGCCTTATTAAGGCCATAGTAGCTCTACATGTAGACCGAACGGAAGCACAGTTTGGTAGAAATTCTTAATCGACTATGGTCCGTGCAGGCCAAAAAAGGAATAATCTTCGAATTCTCACGCCTTCATTAGGGCGCACATGGTGGGGTAAATCACTGCACTCTGTTCGCAGTTAAGCGTTGCAATCAATATCGGCAGAACTCGGAGTCCGTATAAAGCCGCCTCAGCGTGCACACGCCCGTGCGGCACGTCATTAGACGAGGATTCCGGGGGACTGGCCTGTTCGTAATCCACTAAAACAATGGTCCTACCATCTAAAACGCACCGTGTTCCCCTCTACGGGAACCCCCTAGAT",
        "AGAGCGCAGAGAAGTCATTAGAACATGTAGCACATCGCTTATTAAGGGTCAATACCTAAAGGGCCTAACTATACGCCACACGGAACAGCTC",
        score,
        1
      ),
      (
        22,
        "AGGGCGCACATG--GTGGGGTA-AATCAC-T-GCAC-TCTG-TTCGCAGTTAAGCGTTGCAATCAATATCGGC-AGAACTCGGAGTCCGTA--TAAAGCCGCCTCAGCGTGCACACGC-C",
        "AGAGCGCAGA-GAAGTCAT-TAGAA-CATGTAGCACATC-GCTT---A-TTAAG-G--G---TCAATA-C--CTA-AA---GG-G-CC-TAACTATA-C-GCCACA-CG-GAACA-GCTC"
      )
    )
  }

  test("fitting affine alignment") {
    val score = {
      val l = List('A', 'T', 'G', 'C')
      l.flatMap { c1 =>
        l.map { c2 =>
          (c1, c2) -> (if (c1 == c2) 1
                       else -1)
        }
      }
    }.toMap

    assertEquals(
      FittingPairwiseAlignment
        .fittingAffineAlignment("ATTA", "ATTA", score, 1, 1),
      (4, "ATTA", "ATTA")
    )
    assertEquals(
      FittingPairwiseAlignment
        .fittingAffineAlignment("ATTA", "GGGGATTA", score, 1, 1),
      (0, "----ATTA", "GGGGATTA")
    )
    assertEquals(
      FittingPairwiseAlignment
        .fittingAffineAlignment("ATTA", "ATTAGGGG", score, 1, 1),
      (0, "ATTA----", "ATTAGGGG")
    )
    assertEquals(
      FittingPairwiseAlignment
        .fittingAffineAlignment("AATGCAACGT", "TGCACGTGG", score, 2, 1),
      (2, "TGCAACGT--", "TGC-ACGTGG")
    )
    assertEquals(
      FittingPairwiseAlignment
        .fittingAffineAlignment("AATGCAACGT", "TGCAACGTTGG", score, 2, 1),
      (4, "TGCAACGT---", "TGCAACGTTGG")
    )
    assertEquals(
      FittingPairwiseAlignment
        .fittingAffineAlignment("AATGCAACGTT", "CGTGG", score, 2, 1),
      (0, "CGT--", "CGTGG")
    )

    assertEquals(
      FittingPairwiseAlignment.fittingAffineAlignment(
        "CAATCACCCCAATCCCTCAATCCTGGCCCCACGCATAGGCTAATGCCAATCGCGGCCAGGGTATAACCGCCATAACTGTGGGTCAGAAGGGATAAGTTCCACAATCCTATTTTCCTCGAGGCGCTTCGATGCGTTAACGCGTACACTCTGTCGGCCAACCGTGTGGGAGCCGAATTGGCTGGGCTGTTGAACATTCTATCAGTAGATAAACGAAGGTACATCCGAGGTTGTCGATCGACCGCGGGGTCGTAGCGCGTGCATGTTCCTTTCAGGCCCACATACTCCGGAACGGTTCATATCACGACTATTCTTGCACAATCGGACAACGGTGTACCATGGTGGACACCGTAGGAGACCAATACTGCGTAAATCATAAGCATTGGAGAGTGGACTGCTAGCGAGGCTCACCATGGAGTCTCGGTCGGCATCTCCTGACTGCTGTTCCATCGCGTTTTTCTTTTACTCACGCAATAAATCAATACCCCCTAACACAGGCCTGCTCCAGCCTTATTAAGGCCATAGTAGCTCTACATGTAGACCGAACGGAAGCACAGTTTGGTAGAAATTCTTAATCGACTATGGTCCGTGCAGGCCAAAAAAGGAATAATCTTCGAATTCTCACGCCTTCATTAGGGCGCACATGGTGGGGTAAATCACTGCACTCTGTTCGCAGTTAAGCGTTGCAATCAATATCGGCAGAACTCGGAGTCCGTATAAAGCCGCCTCAGCGTGCACACGCCCGTGCGGCACGTCATTAGACGAGGATTCCGGGGGACTGGCCTGTTCGTAATCCACTAAAACAATGGTCCTACCATCTAAAACGCACCGTGTTCCCCTCTACGGGAACCCCCTAGAT",
        "AGAGCGCAGAGAAGTCATTAGAACATGTAGCACATCGCTTATTAAGGGTCAATACCTAAAGGGCCTAACTATACGCCACACGGAACAGCTC",
        score,
        1,
        1
      ),
      (
        22,
        "AGGGCGCACATG--GTGGGGTA-AATCA-CT-GCAC-TCTG-TTCGCAGTTAAGCGTTGCAATCAATATCGGC-AGAACTCGGAGTCCGTA--TAAAGCCGCCTCAGCGTGCACACGC-C",
        "AGAGCGCAGA-GAAGT-CATTAGAA-CATGTAGCACATC-GCTT---A-TTAAG-G--G---TCAATA-C--CTA-AA---GG-G-CC-TAACTATA--CGCCACA-CG-GAACA-GCTC"
      )
    )

    assertEquals(
      FittingPairwiseAlignment
        .fittingAffineAlignment("AAAATTTAAAA", "TTT", score, 1, 1),
      (3, "TTT", "TTT")
    )
    assertEquals(
      FittingPairwiseAlignment.fittingAffineAlignment(
        "AAAATTTGGGTTTTAAAA",
        "TTTCCCTTTT",
        score.mapValues(_ * 10),
        1,
        1
      ),
      (64, "TTT---GGGTTTT", "TTTCCC---TTTT")
    )
    assertEquals(
      FittingPairwiseAlignment.fittingAffineAlignment(
        "AAAATTTGGGTTTTAAAA",
        "TTTCCCTTTT",
        score.mapValues(_ * 10),
        10,
        1
      ),
      (46, "TTT---GGGTTTT", "TTTCCC---TTTT")
    )
  }

  test("overlapAlignment") {

    val score = {
      val l = List('A', 'T', 'G', 'C')
      l.flatMap { c1 =>
        l.map { c2 =>
          (c1, c2) -> (if (c1 == c2) 1
                       else -2)
        }
      }
    }.toMap

    assertEquals(
      OverlapPairwiseAlignment
        .overlapAlignment("ATTA", "ATTA", score, 5),
      (4, "ATTA", "ATTA")
    )
    assertEquals(
      OverlapPairwiseAlignment
        .overlapAlignment("GGGGATTA", "ATTA", score, 5),
      (4, "ATTA", "ATTA")
    )
    assertEquals(
      OverlapPairwiseAlignment
        .overlapAlignment("ATTAGGGG", "ATTA", score, 5),
      (0, "", "")
    )

    assertEquals(
      OverlapPairwiseAlignment
        .overlapAlignment("AATGCAACGT", "TGCACGTGG", score, 2),
      (5, "TGCAACGT", "TGCA-CGT")
    )
    assertEquals(
      OverlapPairwiseAlignment
        .overlapAlignment("AATGCAACGT", "TGCAACGTTGG", score, 2),
      (8, "TGCAACGT", "TGCAACGT")
    )
    assertEquals(
      OverlapPairwiseAlignment
        .overlapAlignment("AATGCAACGTT", "TGCAACGTGG", score, 2),
      (6, "TGCAACGTT", "TGCAACGT-")
    )

    assertEquals(
      OverlapPairwiseAlignment.overlapAlignment(
        "GCTATAAGAATAAACCACTAGATCACCTCCGGCTCGCTCACTCCTGATCATGGTTCGTGCTAACATCGCGCCGCGCTGACGCCGAATCGTTCGTAGGAGACAAGTCGACGACCTCATCTACAGGCAAAAGTTAAATTAGCTCTCGGCTAGATGTGACAATCGGAACCCTGCACCCTGCGTAATAGGGTAAATAGTCGGGAGTTGATGCACACACCTAGATATTGGCTGAATGACAGACTGCCATTCCTGCACTGGAAAGTAGAGTGCATATGTTTCGTGAGATTATGCAGGCTCTACGGTTATACTGGGCTCCACGGATTCGACCGGTACTGTTGATTGAAGACTCTTCTATAGAGGCTCTAACCGCGGAGGCCGCAACCAATCGACAATGAAGCACCCGTCGTCGGTATCGTTGGGAAGGACGACACCGTAAGGGCAGACTTTATCGTGACCCGTCTGCTTGCTAGAAAAGCCCTGGCGTTTGTACAACGTCCGTGCAGAATTAGCGTTTTTCTCAGGAAAGATGAGGGGGTTGATCATCATCTCGTTTCGCACGGGTCAAGCGCATTTTCCTACTGTTTTGGACACAGTACGTCTTCCACTGATCTCATACGGACATTACCAGCACCCTTTTGTACCTGTCGTAACTTGTGCCATTCTAGGCCCGTTTTCACTTGCGCTTATGATCATGGTTCCGCTGATCTATATGGGCCGGGTAGGGCACTCCCAGATGAAGGGGAGTAATGGTAGCCGGATCCAAGTGACGCGCCCTAGCGGCTCCGGAGTTTGATAGACGTCGTGCTATGGAGCGTTGGAGCGACAACGCGCTCGTGCTCTGGAAGGTCGCTGCTGATCCGTAA",
        "TACTGGTCCTGACCCACCTCACTTTGATGTCCCCTTTTCTCGTTTGCGCATCAAGATCTGGCCCGCAACTATTGGCCGTGAAAGGCACTCATCAATAAAGACAGTACTCACGCGGTCGGATCCAAATGCGCGCACCGAGCGGCCCAGGAGTTGATAGCGTCGAGTAACCTATTAGGACTCGAGGCAACTCGCGCTCTCTCAGGAGGCTCGCCTGCTAGTCCGTGAACGACGGATCTTTGGTGCTGCCTTCCTATCATGACATTGCCTAATAACGAGCGGCACCTACTCCCAGGTCTTTGAAGGGATGGCTTGTTTACCCCGATTCCGAGAAATAGAGATGACTCCTAAGGAAGTAATGAAGGAAGTTCAGTGGTATGGGTATCGTTTAGTTTGCCAGGGAGATTGCCCATAACCTAAGTCCCTAATACAGCAGTAGATCTCACCATAGATGTAGGAAAGCACAGTGATTTAGACGCTTAGCCAAATACAAAGGAATGTACCCCCTCCTAACACTGAGCACCGCTTATTTACTAGTATACTCAGAGTGTGGAGCGCTGAACGTTGTGTCAACAAGAACATAAGCCGCCGTGAATGAATTTGTGAAGGGGAGTGATCATGGTTTTACTCGTGGTAGATTTGGGCAGAACCTGATTCCTCACGTGTGAATGTAATTGAAGCTGACTCCCACACATACAGGCACGATTCTTTTAGATGATGTTTTAGGAAGCGCATTTCGTATTAACACTGCCTTGCATTTGATAACCATCACTTGTTCATTACATGATCCCATAGGGCCGTGTTGTTACTTTCGTGTTAGTCGAGCAGTATGACCACCTTTTCGGCGCTTGATATGCCTCAAGACGTGCGATTCAAGGAATCAAACAAATGAACGCCGCACTGGATGACTGGG",
        score,
        2
      ),
      (
        13,
        "TACCTG-TCGTAACTTGTGC-CA-TTCT-AGG-CCCGTTTTCAC-TT-GCGCTT-ATGATCATGGTTCCGCTGATCTATATGGGCCGGGTAGGGCACTCC-CAGATGAAGGGGAGTAATG--GTAGCCGGATCCAAGTGACGCGC-CCTAGCGGCTCC-GGAGTTTGATAGACGTCGTG---C-TAT--GGAGCGTTGGAGCGACAAC--GCGCTCGTGCTCTGGAAGG-TCGC-TGCT-GATCCGT-AA",
        "TAC-TGGTCCTGACCCAC-CTCACTT-TGATGTCCCCTTTTCTCGTTTGCGCATCAAGATC-TGGC-CCGCA-A-CTAT-TGG-CCGTGAAAGGCACTCATCA-ATAAAGAC-AGTACTCACGCGGTCGGATCCAAATG-CGCGCACCGAGCGGC-CCAGGAGTT-GATAG-CGTCGAGTAACCTATTAGGA-C-TCG-AG-G-CAACTCGCGCTC-T-CTCAGGA-GGCTCGCCTGCTAG-TCCGTGAA"
      )
    )

  }

}
